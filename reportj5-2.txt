1511179
前田　諒磨
MIコース　6/25
#----------------------------
Q1. 木構造の解釈実行するプログラムで、プログラムのように書いて実行させるという手法が興味深かった。
Q2. 前回に比べて内容が大幅に発展していると感じた。最後まではなかなか時間がかかる。

#-----------------------------

練習８
*Cソースコード
#include <stdio.h>

struct stab {
  int val;
  char name[20]; } stab [100];
int stabuse = 0;
extern char *yytext;
struct node {
int type, left, right; } ntab[400];
int ntabuse = 1;

#define T_STLIST 1
#define T_ASSIGN 2
#define T_READ 3
#define T_PRINT 4
#define T_ADD 5
#define T_SUB 6
#define T_NUM 7
#define T_VAR 8

int node(t, l, r)
     int t, l, r; {
  int i= ntabuse++;
  ntab[i].type = t; ntab[i].left = l; ntab[i].right = r;
  return i;
}

int lookup(char*);

#include "y.tab.c"
#include "lex.yy.c"

int main() { 
  yyparse();
  return 0;
}


int lookup(s)
     char *s; {
  int i;
  for(i = 0; i < stabuse; ++i)
    if (strcmp(stab[i].name, s) == 0) return i;
  if(stabuse>=99) {
    printf("table overflow.\n"); exit(1);}
  strcpy(stab[stabuse].name, s); return stabuse++;
}

int dotree(i)
     int i; {
  switch(ntab[i].type){
  case T_STLIST: if(ntab[i].left) dotree(ntab[i].left);
    dotree(ntab[i].right); break;
  case T_ASSIGN: stab[ntab[i].left].val = dotree(ntab[i].right); break;
  case T_READ: scanf("%d", &stab[ntab[i].left].val); break;
  case T_PRINT: printf("%d\n", dotree(ntab[i].left)); break;
  case T_ADD: return dotree(ntab[i].left) + dotree(ntab[i].right);
  case T_SUB: return dotree(ntab[i].left) - dotree(ntab[i].right);
  case T_NUM: return ntab[i].left;
  case T_VAR: return stab[ntab[i].left].val; }
}

*yaccソースコード
%token NUM;
%token IDENT;
%token READ;
%token PRINT;
%%
prog  : IDENT '{' stlist'}'  { dotree($3); return; }
;

stlist   :                   { $$ = 0; }
|stlist stat                 { $$ = node(T_STLIST, $1, $2); }
;
stat  : var '=' expr ';'     { $$ = node(T_ASSIGN, $1,$3); }
| READ var ';'               { $$ = node(T_READ, $2,0); }
| PRINT expr ';'             { $$ = node(T_PRINT, $2,0); }
;

expr   : prim                { $$ = $1; }
| expr '+' prim              { $$ = node(T_ADD, $1,$3); }
| expr '-' prim              { $$ = node(T_SUB, $1,$3); }
;

prim    : NUM        { $$ = node(T_NUM, atoi(yytext),0); }
| var                { $$ = node(T_VAR, $1,0); }
| '(' expr ')'       { $$ = $2; }
;

var     : IDENT      { $$ = lookup(yytext); }
;

*lexソースコード

alpha   [a-zA-Z]
digit   [0-9]
white   [\n\t]
%%
read                        { return READ; }
print                       { return PRINT; }
{alpha}({alpha}|{digit})*   { return IDENT; }
{digit}+                    { return NUM; }
[-+()=;{}]                   { return yytext[0]; }
{white}                     { ; }

＃ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
*実行例
./a.out
main {     
 read x;
 y= x + 1;
   print y;
 }

20
21



*説明

cではノード種別の定義とnode()を定義することにより木構造を定義してdotree()ではその木構造を解釈実行するようにしている。yaccでは今までのものと違い定義されている式に当てはまる度にnodeの中身を持ってくるようにして、木構造を組み立てることを可能にしている。
