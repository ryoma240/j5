1511179
前田　諒磨
MIコース　6/20
#----------------------------
Q1. 自分で数値やアルファベットを定義して、文字や構文を解析していくことが簡単にできることは興味深かった。また、lexだと簡単にかけるものもc言語だとかなりめんんどくさい分岐になったので、lexの優秀な部分がわかりやすかった。
Q2. まだ入門の部分なので今学んでいることが何に応用されているかを次回から学んで生きたい。

#-----------------------------

練習６
*ソースコード
sign   [+-]
dot  "."
digits  [0-9]
alpha  [a-zA-Z]
index [e]
white  [\n\t ]
%% 
{sign}?{digits}+    { return NUM;  }
{sign}?{digits}+{dot}{digits}*  {return RNUM; } 
{sign}?{digits}+{dot}{digits}*{index}{sign}?{digits}+ {return INDEX;}
{sign}?{digits}+{index}{sign}?{digits}+ {return INDEX;}
{alpha}({alpha}|{digits})*  {return IDENT;}
{white}        {;}

*実行例
%./a.out
12.5e-6
idx: 12.5e-6
12.4
rnum: 12.4
1 
num: 1
emn5
id: emn5
-15.3e-13
idx: -15.3e-13

*説明
idxは指数関数と言う意味で使っている。indexでeだけを定義してその後に整数がきた場合にINDENTに振り分けられず、INDEXに振り分けられるようにした。この際指数の定義が先にされているが、後でも一致する部分の長さから指数は指数に振り分けられる。


練習12
*ソースコード

%token NUM;
%%
expr     : NUM         {printf("NUM:%s\n", yytext); }
| expr '+' NUM         {printf("ADD:%s\n", yytext); }
| expr '-' NUM         {printf("SUB:%s\n", yytext); }
;


*実行例
1+5-6-5+89
NUM:1
ADD:5
SUB:6
SUB:5
ADD:89
12
syntax error

*説明

SUBが引き算表すように定義している。「｜」は1つの規則の中では複数行にわたって利用できるので、引き算を別々の規則として書かずに一つの規則の中でつなげてしまい、その後の動作も追加して引き算も扱えるようにした。また練習11でlexは直してあるが、
"-"            { return '-'; }
を1行追加した。
